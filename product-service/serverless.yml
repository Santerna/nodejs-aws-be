service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  environment:
    DYNAMODB_PRODUCTS_TABLE: ${env:DYNAMODB_PRODUCTS_TABLE_NAME}
    DYNAMODB_STOCK_TABLE: ${env:DYNAMODB_STOCK_TABLE_NAME}
  httpApi:
    cors: true

  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProductsList:
    handler: src/getProductList.getProductsList
    events:
      - http:
          path: /
          method: get
  getProductById:
    handler: src/getProductById.getProductById
    events:
      - http:
          path:  products/{productId}
          method: get
  createProduct:
    handler: src/createProduct.createProduct
    events:
      - http:
          path: products
          method: post
