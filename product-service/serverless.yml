service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  environment:
    DYNAMODB_PRODUCTS_TABLE: ${self:service}-poducts-table-${sls:stage}
    DYNAMODB_STOCK_TABLE: ${self:service}-stock-table-${sls:stage}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Scan*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: DYNAMODB_PRODUCTS_TABLE_ARN
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Scan*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:eu-central-1:616102254921:table/stock-table


# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProductsList:
    handler: src/getProductList.getProductsList
    events:
      - http:
          path: /
          method: get
          cors: true
  getProductById:
    handler: src/getProductById.getProductById
    events:
      - http:
        path:  products/{productId}
        method: get
        cors: true
        request:
          parameters:
            paths:
              productId: true
  createProduct:
    handler: src/createProduct.createProduct
    events:
      -http:
        path: products
        method: post
        cors: true

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        # TableName: ${self:service}-customerTable-${sls:stage}
    StockTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stock-table
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
