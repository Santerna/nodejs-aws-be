service: product-service

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  environment:
    DYNAMODB_PRODUCTS_TABLE: ${env:DYNAMODB_PRODUCTS_TABLE_NAME}
    DYNAMODB_STOCK_TABLE: ${env:DYNAMODB_STOCK_TABLE_NAME}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

  httpApi:
    cors: true

  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic

functions:
  getProductsList:
    handler: src/getProductList.getProductsList
    events:
      - http:
          path: /
          method: get
  getProductById:
    handler: src/getProductById.getProductById
    events:
      - http:
          path:  products/{productId}
          method: get
  createProduct:
    handler: src/createProduct.createProduct
    events:
      - http:
          path: products
          method: post
  catalogBatchProcess:
    handler: src/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
  
